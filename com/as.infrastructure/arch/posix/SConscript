import os
from building import *

Import('asenv')
MODULES=asenv['MODULES']
ASROOT=asenv['ASROOT']

cwd = GetCurrentDir()

objs = []

if('CAN' in MODULES):
    objs += Glob('mcal/Can.c')
    asenv.Append(CPPDEFINES=['CAN_LL_DL=64'])
    if(IsPlatformWSL()):
        asenv.Append(CPPDEFINES='CAN_DEV_NAME=\'"socketwin"\'')

if('DIO' in MODULES):
    objs += Glob('mcal/Dio.c')

if(('FATFS' in MODULES) or ('LWEXT4' in MODULES)):
    objs += Glob('mcal/diskio.c')

if('EEP' in MODULES):
    objs += Glob('mcal/Eep.c')

if('FLASH' in MODULES):
    objs += Glob('mcal/Flash.c')

if('FLS' in MODULES):
    objs += Glob('mcal/Fls.c')

if('IPC' in MODULES):
    objs += Glob('mcal/Ipc.c')

if('LCD' in MODULES):
    objs += Glob('mcal/Lcd.c')

if('MCU' in MODULES):
    objs += Glob('mcal/Mcu.c')

if('PORT' in MODULES):
    objs += Glob('mcal/Port.c')

if('STMO' in MODULES):
    objs += Glob('mcal/Stmo.c')

if('LWIP' in MODULES):
    download = '%s/release/download'%(ASROOT)
    lwip='%s/lwip-contrib'%(download)
    if(IsPlatformWindows()):
        asenv.Append(CPPPATH='%s/ports/win32'%(lwip))
        objs += ['%s/ports/win32/pcapif.c'%(lwip)]
        #objs += Glob('lwip-contrib/ports/win32/pcapif_helper.c')
        asenv.Append(CPPDEFINES='PCAPIF_HANDLE_LINKSTATE=0')
        asenv.Append(CPPDEFINES='USE_PCAPIF')
        MKSymlink('%s/ports/win32/lwipcfg_msvc.h.example'%(lwip),
                  '%s/ports/win32/lwipcfg_msvc.h'%(lwip))
    else:
        objs += Glob('lwip/tapif.c')

    if(IsPlatformWindows()):
        pcap='%s/WpdPack'%(download)
        if(not os.path.exists(pcap)):
            RunCommand('''cd %s && curl -O https://www.winpcap.org/install/bin/WpdPack_4_1_2.zip &&
                unzip WpdPack_4_1_2.zip'''%(download))
        MKSymlink(pcap,'%s/WpdPack'%(cwd))
        asenv.Append(CPPPATH=['%s/WpdPack/Include'%(cwd)])
        if(asenv['msys2']):
            objs += Glob('%s/WpdPack/Lib/x64/*.lib'%(cwd))
        else:
            asenv.Append(LIBS=['packet','wpcap'])
            asenv.Append(LIBPATH=['%s/WpdPack/Lib'%(cwd)])
        if('-D_MSC_VER' not in asenv['CCFLAGS']):
            asenv.Append(CPPDEFINES='_MSC_VER')

if('UIP' in MODULES):
    uip='%s/release/download/contiki'%(ASROOT)
    asenv.Append(CPPPATH=['%s/cpu/native'%(uip)])
    asenv.Append(LIBS=['iphlpapi'])
    if(IsPlatformWindows()):
        objs += Glob('%s/cpu/native/net/wpcap*.c'%(uip))
    else:
        objs += Glob('%s/cpu/native/net/tapdev.c'%(uip))
        objs += Glob('%s/cpu/native/net/tapdev-drv.c'%(uip))

asenv.Append(CPPDEFINES='__AS_CAN_BUS__')
asenv.Append(CPPPATH=['%s/com/as.infrastructure/communication/RPmsg'%(asenv['ASROOT'])])

objs += SConscript('%s/com/as.tool/lua/SConscript'%(asenv['ASROOT']))

if('GTK' in MODULES):
    asenv.ParseConfig('%s --cflags gtk+-3.0'%(asenv['pkgconfig']))
    asenv.ParseConfig('%s --libs gtk+-3.0 glib-2.0 gthread-2.0'%(asenv['pkgconfig']))
    asenv.Append(CCFLAGS='-DGUI_USE_GTK')
    if('-pthread' in asenv['CCFLAGS']):
        asenv['CCFLAGS'].remove('-pthread')
    if('-pthread' in asenv['LINKFLAGS']):
        asenv['LINKFLAGS'].remove('-pthread')
    if('-pthread' in asenv['LINKFLAGS']):
        asenv['LINKFLAGS'].remove('-pthread')
    if('dwmapi' in asenv['LIBS']):
        asenv['LIBS'].remove('dwmapi')
elif('OPENVG' in MODULES):
    asenv.Append(CPPPATH=['%s/openvg/vg'%(cwd)])
    asenv.Append(CPPPATH=['%s/com/as.infrastructure/system/gui/openvg/include/EGL'%(ASROOT)])
    asenv.Append(CPPPATH=['%s/com/as.infrastructure/system/gui/openvg/include/VG'%(ASROOT)])
    asenv.Append(CPPDEFINES=['OPENVG_STATIC_LIBRARY','EGL_STATIC_LIBRARY','_WIN32'])
    objs += Glob('openvg/vg/win32/*.cpp')
    objs += Glob('openvg/vg/*.cpp')
    asenv.Append(CXXFLAGS='-fpermissive')

asenv.Append(LIBS=['pthread','stdc++','m'])

if(IsPlatformWindows()):
    asenv.Append(LIBS=['wsock32'])
    asenv.Append(CPPDEFINES='__WINDOWS__')
    if(asenv['msys2']):
        asenv.Append(CPPDEFINES='__X86_64__')
        print('WARNING: need modify the c:/msys64/mingw64/x86_64-w64-mingw32/include/ws2tcpip.h line 86-103, add WS2TCPIP_INLINE')
        print('WARNING: need modify the c:/msys64/mingw64/x86_64-w64-mingw32/include/ws2ipdef.h line 127, add WS2TCPIP_INLINE')
else:
    asenv.Append(CPPDEFINES='__LINUX__')

asenv.Append(CCFLAGS='-std=gnu99')
asenv.Append(CCFLAGS='-O0')
asenv.Append(CCFLAGS='-g')

asenv.Append(CPPPATH='%s/mcal'%(cwd))

Return('objs')
